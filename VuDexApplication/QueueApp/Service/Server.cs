///////////////////////////////////////////////////////////
//  Server.cs
//  Implementation of the Class Server
//  Generated by Enterprise Architect
//  Created on:      05-May-2019 22:35:12
//  Original author: vule9
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Collections.Concurrent;
using QueueApp.Common;
using System.Threading;

namespace QueueApp.Service
{
    public class Server
    {
        #region Fields
        public Dictionary<String, ClientQueue> ClientQueues;
        public Queue DbQueue;
        public Queue ServerQueue;
        private QueueProvider queueProvider = new QueueProvider();
        private XmlProvider xmlProvider = new XmlProvider();
        #endregion

        public Server()
        {
            ServerQueue = new ServerQueue("ServerQueue");
            ClientQueues = new Dictionary<String, ClientQueue>();
            DbQueue = new DbQueue("DatabaseQueue");
            Task.Factory.StartNew(() => ListeningDbQueue());
            Task.Factory.StartNew(() => ListeningOnServerQueue());
        }
        ~Server()
        {

        }

        #region Commands
        public bool CreateQueue(Packet packet)
        {
            if (packet == null)
                throw new ArgumentNullException("Paket ne moze biti null.");

            if (!ClientQueues.ContainsKey(packet.Message))
            {
                ClientQueue queue = new ClientQueue(packet.Message);
                //queue.SubscribedClients.Add(packet.User);
                ClientQueues.Add(queue.Title, queue);

                Task.Factory.StartNew(() => ListeningOnClientQueue(queue.QueueA));

                return true;
            }
            return false;
        }
        public bool Subscribe(Packet packet)
        {
            if (packet == null)
                throw new ArgumentNullException("Paket ne moze biti null.");

            if (ClientQueues.ContainsKey(packet.Message))  //ako postoji red sa ovim nazivom u recniku klijentskih redova
            {
                //ClientQueues[packet.Message].SubscribedClients.Add(packet.User);
                return true;
            }

            return false;
        }
        public void Update(String xml)
        {
            if (xml == "")
                throw new ArgumentException("Poruka ne moze biti prazna.");

            if (xml == null)
                throw new ArgumentNullException("Poruka ne moze biti null");

            queueProvider.Push(DbQueue.QueueA, xml);
        }
        #endregion

        #region Listeners
        private void ListeningDbQueue()
        {
            while (true)
            {
                if (this.DbQueue.QueueB.Count > 0)
                {
                    string text = queueProvider.Pop(this.DbQueue.QueueB);
                    Packet packet = xmlProvider.Deserialize(text);

                    User user = packet.User;
                    user.IsListening = true;
                    if (packet.Message == "Add")
                    {
                        packet.Message = "Successfully registered user.";
                        ClientQueues[packet.User.SubscribedTo].SubscribedClients.Add(user);
                    }
                    else if (packet.Message == "Update")
                    {
                        packet.Message = "Your data was successfully updated.";
                        User userToUpdate = ClientQueues[packet.User.SubscribedTo].SubscribedClients.Find(x => x.UserId == packet.User.UserId);
                        userToUpdate = packet.User;
                    }
                    text = xmlProvider.Serialize(packet);
                    //vracamo klijentu poruku o uspesnosti metode
                    queueProvider.Push(ClientQueues[packet.User.SubscribedTo].QueueB, text);
                }
                Thread.Sleep(5000);
            }
        }
        private void ListeningOnServerQueue()
        {
            while (true)
            {
                if (ServerQueue.QueueA.Count > 0)
                {
                    string text = queueProvider.Pop(ServerQueue.QueueA);
                    Packet packet = xmlProvider.Deserialize(text);

                    if (packet.TypeOfRequest == RequestType.CREATE)
                    {
                        string response = "";
                        if (CreateQueue(packet))
                        {
                            // TREBA VRATITI KLIJENTU DA JE RED USPESNO NAPRAVLJEN
                            packet.User.SubscribedTo = packet.Message;   // klijent je pretplacen na neki red
                            packet.Message = $"Queue with '{packet.Message}' title is successfully created.";
                            response = xmlProvider.Serialize(packet);

                            queueProvider.Push(DbQueue.QueueA, response);
                        }
                        else
                        {
                            packet.Message = $"Queue with '{packet.Message}' title is already taken.";
                            response = xmlProvider.Serialize(packet);
                        }

                        queueProvider.Push(ServerQueue.QueueB, response);
                    }
                    else if (packet.TypeOfRequest == RequestType.SUBSCRIBE)
                    {
                        if (Subscribe(packet))  //obezbedjen subscribe
                        {
                            packet.User.SubscribedTo = packet.Message;
                            packet.Message = "Successfully subscribed!";
                            String response = xmlProvider.Serialize(packet);
                            queueProvider.Push(ServerQueue.QueueB, response);
                            queueProvider.Push(DbQueue.QueueA, response);
                        }
                        else
                        {
                            packet.Message = "Unsuccessfully subscribed! No requested queue!";
                            queueProvider.Push(ServerQueue.QueueB, xmlProvider.Serialize(packet));
                        }
                    }
                }
                Thread.Sleep(5000);
            }
        }
        public void ListeningOnClientQueue(ConcurrentQueue<String> queue)
        {
            while (true)
            {
                if (queue.Count > 0)
                {
                    string text = queueProvider.Pop(queue);
                    Packet packet = xmlProvider.Deserialize(text);

                    if (packet.TypeOfRequest == RequestType.UPDATE)
                    {
                        Update(text);
                    }
                }
                Thread.Sleep(5000);
            }
        }
        #endregion
    }//end Server
}